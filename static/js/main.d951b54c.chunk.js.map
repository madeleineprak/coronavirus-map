{"version":3,"sources":["components/Map/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","mapRef","React","createRef","loadModules","css","then","ArcGISMap","MapView","FeatureLayer","Locate","Search","Fullscreen","Home","Legend","map","basemap","view","container","current","popup","dockEnabled","dockOptions","position","buttonEnabled","breakpoint","center","zoom","cases","url","definitionExpression","opacity","color","outfields","popupTemplate","content","type","mediaInfos","caption","value","fields","normalizeField","tooltipField","labelingInfo","symbol","haloColor","haloSize","font","size","family","style","weight","labelPlacement","labelExpressionInfo","expression","renderer","outline","width","label","visualVariables","field","minDataValue","maxDataValue","minSize","maxSize","search","ui","add","fullscreen","locate","useHeadingEnabled","goToOverride","options","target","scale","goTo","homeBtn","legend","layerInfos","layer","title","this","className","ref","Component","Footer","id","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d951b54c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { loadModules } from 'esri-loader';\r\n\r\nexport class Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\r\n    loadModules(['esri/Map', 'esri/views/MapView', 'esri/layers/FeatureLayer', 'esri/widgets/Locate', 'esri/widgets/Track', 'esri/Graphic', 'esri/widgets/Search', 'esri/widgets/Fullscreen', 'esri/widgets/Home', 'esri/widgets/Legend'], { css: true })\r\n      .then(([ArcGISMap, MapView, FeatureLayer, Locate, Track, Graphic, Search, Fullscreen, Home, Legend]) => {\r\n        const map = new ArcGISMap({\r\n          basemap: 'dark-gray'\r\n        });\r\n\r\n        this.view = new MapView({\r\n          container: this.mapRef.current,\r\n          map: map,\r\n          popup: {\r\n            dockEnabled: true,\r\n\r\n            dockOptions: {\r\n              position: \"bottom-right\",\r\n              // Disables the dock button from the popup\r\n              buttonEnabled: false,\r\n              // Ignore the default sizes that trigger responsive docking\r\n              breakpoint: false\r\n            }\r\n          },\r\n          center: [-75.5277, 38.9108],\r\n          // center: [-95.7129, 37.0902], center on US\r\n          zoom: 4\r\n        })\r\n\r\n        var popupCases = {\r\n          \"title\": \"{Province_State}\",\r\n          content: [{\r\n            type: \"media\",\r\n            mediaInfos: [{\r\n              type: \"column-chart\",\r\n              caption: \"{Province_State} has <strong/>{Confirmed}</strong> confirmed cases, <strong>{Recovered}</strong> recovered and <strong>{Deaths}</strong> deaths.\",\r\n              value: {\r\n                fields: [\"Confirmed\", \"Recovered\", \"Deaths\"],\r\n                normalizeField: null,\r\n                tooltipField: \"Confirmed cases, recovered, and deaths\"\r\n              }\r\n            }]\r\n          }],\r\n\r\n        }\r\n\r\n        var casesRenderer = {\r\n          type: \"simple\", \r\n          symbol: {\r\n            type: \"simple-marker\",  \r\n            size: 20,\r\n            color: \"#67b7dc\",\r\n            outline: {  \r\n              width: 0.5,\r\n              color: \"white\"\r\n            }\r\n          },\r\n          label: \"# of confirmed cases by state\", \r\n          visualVariables: [\r\n            {\r\n              type: \"size\",\r\n              field: \"Confirmed\", \r\n              // normalizationField: \"Confirmed\", \r\n              minDataValue: 20, \r\n              maxDataValue: 25000, \r\n              minSize: 10,\r\n              maxSize: 60 \r\n            }\r\n          ]\r\n        };\r\n\r\n        var casesLabels = {\r\n          symbol: {\r\n            type: \"text\",\r\n            color: \"white\",\r\n            haloColor: \"black\",\r\n            haloSize: \"1px\",\r\n            font: {\r\n              size: \"12px\",\r\n              family: \"Noto Sans\",\r\n              style: \"italic\",\r\n              weight: \"bold\"\r\n            }\r\n          },\r\n          labelPlacement: \"center-center\",\r\n          labelExpressionInfo: {\r\n            expression: \"$feature.Confirmed\"\r\n          }\r\n        };\r\n\r\n        var cases = new FeatureLayer({\r\n          url: \"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/1\",\r\n          definitionExpression: \"Country_Region = 'US'\",\r\n          opacity: .5,\r\n          color: [0, 112, 255],\r\n          outfields: [\"Province_State\", \"Confirmed\", \"Recovered\", \"Deaths\"],\r\n          popupTemplate: popupCases,\r\n          labelingInfo: [casesLabels],\r\n          renderer: casesRenderer\r\n        })\r\n\r\n        // var deaths = new FeatureLayer({\r\n        //   url: \"https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/Coronavirus_2019_nCoV_Cases/FeatureServer/0\",\r\n        //   opacity: .5,\r\n        //   color: [0, 112, 255],\r\n        // })\r\n\r\n        // Search widget\r\n        var search = new Search({\r\n          view: this.view\r\n        });\r\n\r\n        this.view.ui.add(search, \"top-right\");\r\n\r\n        var fullscreen = new Fullscreen({\r\n          view: this.view\r\n        });\r\n        this.view.ui.add(fullscreen, \"top-right\");\r\n\r\n        var locate = new Locate({\r\n          view: this.view,\r\n          useHeadingEnabled: false,\r\n          goToOverride: function (view, options) {\r\n            options.target.scale = 1500;  // Override the default map scale\r\n            return view.goTo(options.target);\r\n          }\r\n        });\r\n\r\n        this.view.ui.add(locate, \"top-left\");\r\n\r\n        var homeBtn = new Home({\r\n          view: this.view\r\n        });\r\n\r\n        // Add the home button to the top left corner of the view\r\n        this.view.ui.add(homeBtn, \"top-left\");\r\n\r\n        map.add(cases)\r\n        // map.add(deaths)\r\n\r\n        //  this.view.when(function() {\r\n          // get the first layer in the collection of operational layers in the WebMap\r\n          // when the resources in the MapView have loaded.\r\n          // var featureLayer = this.webmap.layers.getItemAt(0);\r\n\r\n          var legend = new Legend({\r\n            view: this.view,\r\n            layerInfos: [\r\n              {\r\n                layer: cases,\r\n                title: \"# of cases\"\r\n              }\r\n            ]\r\n          });\r\n\r\n          // Add widget to the bottom right corner of the view\r\n          this.view.ui.add(legend, \"bottom-right\");\r\n        });\r\n      // });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.view) {\r\n      // destroy the map view\r\n      this.view.container = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"webmap\" ref={this.mapRef} />\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport './style.css'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div id=\"contact\" className=\"has-background-black-ter\">\r\n            <div className=\"has-text-centered\">\r\n                <p>\r\n                    <p>Data sources are WHO, US CDC, China NHC, ECDC, and DXY and the map layer can be found <a target=\"_blank\" href=\"https://www.arcgis.com/home/item.html?id=c0b356e20b30490c8b8b4c7bb9554e7c\">here</a>.</p>\r\n                    <br></br>\r\n                    <p>Additional Resources:</p>\r\n                    <ul>\r\n                        <li>\r\n                            <a target=\"_blank\" href=\"https://www.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6\">John Hopkins University COVID-19 Dashboard</a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" href=\"https://who.maps.arcgis.com/apps/opsdashboard/index.html#/c88e37cfc43b4ed3baf977d77e4a0667\">WHO COVID-19 Dashboard</a>\r\n                        </li>\r\n                        <li>\r\n                            <a target=\"_blank\" href=\"https://storymaps.arcgis.com/stories/4fdc0d03d3a34aa485de1fb0d2650ee0\">Coronavirus Story Map</a>\r\n                        </li>\r\n                    </ul>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport { Map } from '../src/components/Map/index'\nimport Footer from '../src/components/Footer/index'\n\nfunction App() {\n  return (\n    <div className=\"App has-text-centered\">\n      <section className=\"hero has-background-black-ter\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Spread of COVID-19 Cases in the United States\n      </h1>\n            <h2 className=\"subtitle\">\n              Click on each circle for more details\n      </h2>\n          </div>\n        </div>\n      </section>\n      <div className=\"\">\n        <Map />\n\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}